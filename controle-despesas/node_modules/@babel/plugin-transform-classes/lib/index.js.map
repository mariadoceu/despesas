<<<<<<< HEAD
{"version":3,"names":["getBuiltinClasses","category","Object","keys","globals","filter","name","test","builtinClasses","Set","declare","api","options","assertVersion","loose","setClassMethods","assumption","constantSuper","superIsCallableConstructor","noClassCalls","supportUnicodeId","isRequired","targets","VISITED","WeakSet","visitor","ExportDefaultDeclaration","path","get","isClassDeclaration","splitExportDeclaration","ClassDeclaration","node","ref","id","scope","generateUidIdentifier","replaceWith","t","variableDeclaration","variableDeclarator","toExpression","ClassExpression","state","has","inferred","nameFunction","undefined","add","replacedPath","transformClass","file","isCallExpression","annotateAsPure","callee","isArrowFunctionExpression","arrowFunctionToExpression"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport { isRequired } from \"@babel/helper-compilation-targets\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport nameFunction from \"@babel/helper-function-name\";\nimport splitExportDeclaration from \"@babel/helper-split-export-declaration\";\nimport { types as t } from \"@babel/core\";\nimport globals from \"globals\";\nimport transformClass from \"./transformClass\";\n\nconst getBuiltinClasses = (category: keyof typeof globals) =>\n  Object.keys(globals[category]).filter(name => /^[A-Z]/.test(name));\n\nconst builtinClasses = new Set([\n  ...getBuiltinClasses(\"builtin\"),\n  ...getBuiltinClasses(\"browser\"),\n]);\n\nexport interface Options {\n  loose?: boolean;\n}\n\nexport default declare((api, options: Options) => {\n  api.assertVersion(7);\n\n  const { loose = false } = options;\n\n  const setClassMethods = (api.assumption(\"setClassMethods\") ??\n    loose) as boolean;\n  const constantSuper = (api.assumption(\"constantSuper\") ?? loose) as boolean;\n  const superIsCallableConstructor = (api.assumption(\n    \"superIsCallableConstructor\",\n  ) ?? loose) as boolean;\n  const noClassCalls = (api.assumption(\"noClassCalls\") ?? loose) as boolean;\n  const supportUnicodeId = !isRequired(\n    \"transform-unicode-escapes\",\n    api.targets(),\n  );\n\n  // todo: investigate traversal requeueing\n  const VISITED = new WeakSet();\n\n  return {\n    name: \"transform-classes\",\n\n    visitor: {\n      ExportDefaultDeclaration(path) {\n        if (!path.get(\"declaration\").isClassDeclaration()) return;\n        splitExportDeclaration(path);\n      },\n\n      ClassDeclaration(path) {\n        const { node } = path;\n\n        const ref = node.id || path.scope.generateUidIdentifier(\"class\");\n\n        path.replaceWith(\n          t.variableDeclaration(\"let\", [\n            t.variableDeclarator(ref, t.toExpression(node)),\n          ]),\n        );\n      },\n\n      ClassExpression(path, state) {\n        const { node } = path;\n        if (VISITED.has(node)) return;\n\n        const inferred = nameFunction(path, undefined, supportUnicodeId);\n        if (inferred && inferred !== node) {\n          path.replaceWith(inferred);\n          return;\n        }\n\n        VISITED.add(node);\n\n        const [replacedPath] = path.replaceWith(\n          transformClass(\n            path,\n            state.file,\n            builtinClasses,\n            loose,\n            {\n              setClassMethods,\n              constantSuper,\n              superIsCallableConstructor,\n              noClassCalls,\n            },\n            supportUnicodeId,\n          ),\n        );\n\n        if (replacedPath.isCallExpression()) {\n          annotateAsPure(replacedPath);\n          const callee = replacedPath.get(\"callee\");\n          if (callee.isArrowFunctionExpression()) {\n            // This is an IIFE, so we don't need to worry about the noNewArrows assumption\n            callee.arrowFunctionToExpression();\n          }\n        }\n      },\n    },\n  };\n});\n"],"mappings":"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"}
=======
{"version":3,"names":["getBuiltinClasses","category","Object","keys","globals","filter","name","test","builtinClasses","Set","declare","api","options","assertVersion","loose","setClassMethods","assumption","constantSuper","superIsCallableConstructor","noClassCalls","supportUnicodeId","isRequired","targets","VISITED","WeakSet","visitor","ExportDefaultDeclaration","path","get","isClassDeclaration","splitExportDeclaration","ClassDeclaration","node","ref","id","scope","generateUidIdentifier","replaceWith","t","variableDeclaration","variableDeclarator","toExpression","ClassExpression","state","has","inferred","nameFunction","undefined","add","replacedPath","transformClass","file","isCallExpression","annotateAsPure","callee","isArrowFunctionExpression","arrowFunctionToExpression"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport { isRequired } from \"@babel/helper-compilation-targets\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport nameFunction from \"@babel/helper-function-name\";\nimport splitExportDeclaration from \"@babel/helper-split-export-declaration\";\nimport { types as t } from \"@babel/core\";\nimport globals from \"globals\";\nimport transformClass from \"./transformClass\";\n\nconst getBuiltinClasses = (category: keyof typeof globals) =>\n  Object.keys(globals[category]).filter(name => /^[A-Z]/.test(name));\n\nconst builtinClasses = new Set([\n  ...getBuiltinClasses(\"builtin\"),\n  ...getBuiltinClasses(\"browser\"),\n]);\n\nexport interface Options {\n  loose?: boolean;\n}\n\nexport default declare((api, options: Options) => {\n  api.assertVersion(7);\n\n  const { loose = false } = options;\n\n  const setClassMethods = (api.assumption(\"setClassMethods\") ??\n    loose) as boolean;\n  const constantSuper = (api.assumption(\"constantSuper\") ?? loose) as boolean;\n  const superIsCallableConstructor = (api.assumption(\n    \"superIsCallableConstructor\",\n  ) ?? loose) as boolean;\n  const noClassCalls = (api.assumption(\"noClassCalls\") ?? loose) as boolean;\n  const supportUnicodeId = !isRequired(\n    \"transform-unicode-escapes\",\n    api.targets(),\n  );\n\n  // todo: investigate traversal requeueing\n  const VISITED = new WeakSet();\n\n  return {\n    name: \"transform-classes\",\n\n    visitor: {\n      ExportDefaultDeclaration(path) {\n        if (!path.get(\"declaration\").isClassDeclaration()) return;\n        splitExportDeclaration(path);\n      },\n\n      ClassDeclaration(path) {\n        const { node } = path;\n\n        const ref = node.id || path.scope.generateUidIdentifier(\"class\");\n\n        path.replaceWith(\n          t.variableDeclaration(\"let\", [\n            t.variableDeclarator(ref, t.toExpression(node)),\n          ]),\n        );\n      },\n\n      ClassExpression(path, state) {\n        const { node } = path;\n        if (VISITED.has(node)) return;\n\n        const inferred = nameFunction(path, undefined, supportUnicodeId);\n        if (inferred && inferred !== node) {\n          path.replaceWith(inferred);\n          return;\n        }\n\n        VISITED.add(node);\n\n        const [replacedPath] = path.replaceWith(\n          transformClass(\n            path,\n            state.file,\n            builtinClasses,\n            loose,\n            {\n              setClassMethods,\n              constantSuper,\n              superIsCallableConstructor,\n              noClassCalls,\n            },\n            supportUnicodeId,\n          ),\n        );\n\n        if (replacedPath.isCallExpression()) {\n          annotateAsPure(replacedPath);\n          const callee = replacedPath.get(\"callee\");\n          if (callee.isArrowFunctionExpression()) {\n            // This is an IIFE, so we don't need to worry about the noNewArrows assumption\n            callee.arrowFunctionToExpression();\n          }\n        }\n      },\n    },\n  };\n});\n"],"mappings":"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"}
>>>>>>> main
