"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = applyDecs2203;

function createAddInitializerMethod(initializers, decoratorFinishedRef) {
  return function addInitializer(initializer) {
    assertNotFinished(decoratorFinishedRef, "addInitializer");
    assertCallable(initializer, "An initializer");
    initializers.push(initializer);
  };
}
<<<<<<< HEAD
function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, value) {
  var kindStr;
=======

function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, value) {
  var kindStr;

>>>>>>> main
  switch (kind) {
    case 1:
      kindStr = "accessor";
      break;
<<<<<<< HEAD
    case 2:
      kindStr = "method";
      break;
    case 3:
      kindStr = "getter";
      break;
    case 4:
      kindStr = "setter";
      break;
    default:
      kindStr = "field";
  }
=======

    case 2:
      kindStr = "method";
      break;

    case 3:
      kindStr = "getter";
      break;

    case 4:
      kindStr = "setter";
      break;

    default:
      kindStr = "field";
  }

>>>>>>> main
  var ctx = {
    kind: kindStr,
    name: isPrivate ? "#" + name : name,
    static: isStatic,
    private: isPrivate
  };
  var decoratorFinishedRef = {
    v: false
  };
<<<<<<< HEAD
  if (kind !== 0) {
    ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
  }
  var get, set;
=======

  if (kind !== 0) {
    ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
  }

  var get, set;

>>>>>>> main
  if (kind === 0) {
    if (isPrivate) {
      get = desc.get;
      set = desc.set;
    } else {
      get = function () {
        return this[name];
      };
<<<<<<< HEAD
=======

>>>>>>> main
      set = function (v) {
        this[name] = v;
      };
    }
  } else if (kind === 2) {
    get = function () {
      return desc.value;
    };
  } else {
    if (kind === 1 || kind === 3) {
      get = function () {
        return desc.get.call(this);
      };
    }
<<<<<<< HEAD
=======

>>>>>>> main
    if (kind === 1 || kind === 4) {
      set = function (v) {
        desc.set.call(this, v);
      };
    }
  }
<<<<<<< HEAD
=======

>>>>>>> main
  ctx.access = get && set ? {
    get: get,
    set: set
  } : get ? {
    get: get
  } : {
    set: set
  };
<<<<<<< HEAD
=======

>>>>>>> main
  try {
    return dec(value, ctx);
  } finally {
    decoratorFinishedRef.v = true;
  }
}
<<<<<<< HEAD
=======

>>>>>>> main
function assertNotFinished(decoratorFinishedRef, fnName) {
  if (decoratorFinishedRef.v) {
    throw new Error("attempted to call " + fnName + " after decoration was finished");
  }
}
<<<<<<< HEAD
=======

>>>>>>> main
function assertCallable(fn, hint) {
  if (typeof fn !== "function") {
    throw new TypeError(hint + " must be a function");
  }
}
<<<<<<< HEAD
function assertValidReturnValue(kind, value) {
  var type = typeof value;
=======

function assertValidReturnValue(kind, value) {
  var type = typeof value;

>>>>>>> main
  if (kind === 1) {
    if (type !== "object" || value === null) {
      throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");
    }
<<<<<<< HEAD
    if (value.get !== undefined) {
      assertCallable(value.get, "accessor.get");
    }
    if (value.set !== undefined) {
      assertCallable(value.set, "accessor.set");
    }
=======

    if (value.get !== undefined) {
      assertCallable(value.get, "accessor.get");
    }

    if (value.set !== undefined) {
      assertCallable(value.set, "accessor.set");
    }

>>>>>>> main
    if (value.init !== undefined) {
      assertCallable(value.init, "accessor.init");
    }
  } else if (type !== "function") {
    var hint;
<<<<<<< HEAD
=======

>>>>>>> main
    if (kind === 0) {
      hint = "field";
    } else if (kind === 10) {
      hint = "class";
    } else {
      hint = "method";
    }
<<<<<<< HEAD
    throw new TypeError(hint + " decorators must return a function or void 0");
  }
}
function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers) {
  var decs = decInfo[0];
  var desc, init, value;
=======

    throw new TypeError(hint + " decorators must return a function or void 0");
  }
}

function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers) {
  var decs = decInfo[0];
  var desc, init, value;

>>>>>>> main
  if (isPrivate) {
    if (kind === 0 || kind === 1) {
      desc = {
        get: decInfo[3],
        set: decInfo[4]
      };
    } else if (kind === 3) {
      desc = {
        get: decInfo[3]
      };
    } else if (kind === 4) {
      desc = {
        set: decInfo[3]
      };
    } else {
      desc = {
        value: decInfo[3]
      };
    }
  } else if (kind !== 0) {
    desc = Object.getOwnPropertyDescriptor(base, name);
  }
<<<<<<< HEAD
=======

>>>>>>> main
  if (kind === 1) {
    value = {
      get: desc.get,
      set: desc.set
    };
  } else if (kind === 2) {
    value = desc.value;
  } else if (kind === 3) {
    value = desc.get;
  } else if (kind === 4) {
    value = desc.set;
  }
<<<<<<< HEAD
  var newValue, get, set;
  if (typeof decs === "function") {
    newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, value);
    if (newValue !== void 0) {
      assertValidReturnValue(kind, newValue);
=======

  var newValue, get, set;

  if (typeof decs === "function") {
    newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, value);

    if (newValue !== void 0) {
      assertValidReturnValue(kind, newValue);

>>>>>>> main
      if (kind === 0) {
        init = newValue;
      } else if (kind === 1) {
        init = newValue.init;
        get = newValue.get || value.get;
        set = newValue.set || value.set;
        value = {
          get: get,
          set: set
        };
      } else {
        value = newValue;
      }
    }
  } else {
    for (var i = decs.length - 1; i >= 0; i--) {
      var dec = decs[i];
      newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, value);
<<<<<<< HEAD
      if (newValue !== void 0) {
        assertValidReturnValue(kind, newValue);
        var newInit;
=======

      if (newValue !== void 0) {
        assertValidReturnValue(kind, newValue);
        var newInit;

>>>>>>> main
        if (kind === 0) {
          newInit = newValue;
        } else if (kind === 1) {
          newInit = newValue.init;
          get = newValue.get || value.get;
          set = newValue.set || value.set;
          value = {
            get: get,
            set: set
          };
        } else {
          value = newValue;
        }
<<<<<<< HEAD
=======

>>>>>>> main
        if (newInit !== void 0) {
          if (init === void 0) {
            init = newInit;
          } else if (typeof init === "function") {
            init = [init, newInit];
          } else {
            init.push(newInit);
          }
        }
      }
    }
  }
<<<<<<< HEAD
=======

>>>>>>> main
  if (kind === 0 || kind === 1) {
    if (init === void 0) {
      init = function (instance, init) {
        return init;
      };
    } else if (typeof init !== "function") {
      var ownInitializers = init;
<<<<<<< HEAD
      init = function (instance, init) {
        var value = init;
        for (var i = 0; i < ownInitializers.length; i++) {
          value = ownInitializers[i].call(instance, value);
        }
=======

      init = function (instance, init) {
        var value = init;

        for (var i = 0; i < ownInitializers.length; i++) {
          value = ownInitializers[i].call(instance, value);
        }

>>>>>>> main
        return value;
      };
    } else {
      var originalInitializer = init;
<<<<<<< HEAD
=======

>>>>>>> main
      init = function (instance, init) {
        return originalInitializer.call(instance, init);
      };
    }
<<<<<<< HEAD
    ret.push(init);
  }
=======

    ret.push(init);
  }

>>>>>>> main
  if (kind !== 0) {
    if (kind === 1) {
      desc.get = value.get;
      desc.set = value.set;
    } else if (kind === 2) {
      desc.value = value;
    } else if (kind === 3) {
      desc.get = value;
    } else if (kind === 4) {
      desc.set = value;
    }
<<<<<<< HEAD
=======

>>>>>>> main
    if (isPrivate) {
      if (kind === 1) {
        ret.push(function (instance, args) {
          return value.get.call(instance, args);
        });
        ret.push(function (instance, args) {
          return value.set.call(instance, args);
        });
      } else if (kind === 2) {
        ret.push(value);
      } else {
        ret.push(function (instance, args) {
          return value.call(instance, args);
        });
      }
    } else {
      Object.defineProperty(base, name, desc);
    }
  }
}
<<<<<<< HEAD
=======

>>>>>>> main
function applyMemberDecs(ret, Class, decInfos) {
  var protoInitializers;
  var staticInitializers;
  var existingProtoNonFields = new Map();
  var existingStaticNonFields = new Map();
<<<<<<< HEAD
  for (var i = 0; i < decInfos.length; i++) {
    var decInfo = decInfos[i];

=======

  for (var i = 0; i < decInfos.length; i++) {
    var decInfo = decInfos[i];
>>>>>>> main
    if (!Array.isArray(decInfo)) continue;
    var kind = decInfo[1];
    var name = decInfo[2];
    var isPrivate = decInfo.length > 3;
    var isStatic = kind >= 5;
    var base;
    var initializers;
<<<<<<< HEAD
    if (isStatic) {
      base = Class;
      kind = kind - 5;
=======

    if (isStatic) {
      base = Class;
      kind = kind - 5;

>>>>>>> main
      if (kind !== 0) {
        staticInitializers = staticInitializers || [];
        initializers = staticInitializers;
      }
    } else {
      base = Class.prototype;
<<<<<<< HEAD
=======

>>>>>>> main
      if (kind !== 0) {
        protoInitializers = protoInitializers || [];
        initializers = protoInitializers;
      }
    }
<<<<<<< HEAD
    if (kind !== 0 && !isPrivate) {
      var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
      var existingKind = existingNonFields.get(name) || 0;
=======

    if (kind !== 0 && !isPrivate) {
      var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
      var existingKind = existingNonFields.get(name) || 0;

>>>>>>> main
      if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {
        throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name);
      } else if (!existingKind && kind > 2) {
        existingNonFields.set(name, kind);
      } else {
        existingNonFields.set(name, true);
      }
    }
<<<<<<< HEAD
    applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers);
  }
  pushInitializers(ret, protoInitializers);
  pushInitializers(ret, staticInitializers);
}
=======

    applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers);
  }

  pushInitializers(ret, protoInitializers);
  pushInitializers(ret, staticInitializers);
}

>>>>>>> main
function pushInitializers(ret, initializers) {
  if (initializers) {
    ret.push(function (instance) {
      for (var i = 0; i < initializers.length; i++) {
        initializers[i].call(instance);
      }
<<<<<<< HEAD
=======

>>>>>>> main
      return instance;
    });
  }
}
<<<<<<< HEAD
=======

>>>>>>> main
function applyClassDecs(ret, targetClass, classDecs) {
  if (classDecs.length > 0) {
    var initializers = [];
    var newClass = targetClass;
    var name = targetClass.name;
<<<<<<< HEAD
=======

>>>>>>> main
    for (var i = classDecs.length - 1; i >= 0; i--) {
      var decoratorFinishedRef = {
        v: false
      };
<<<<<<< HEAD
=======

>>>>>>> main
      try {
        var nextNewClass = classDecs[i](newClass, {
          kind: "class",
          name: name,
          addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef)
        });
      } finally {
        decoratorFinishedRef.v = true;
      }
<<<<<<< HEAD
=======

>>>>>>> main
      if (nextNewClass !== undefined) {
        assertValidReturnValue(10, nextNewClass);
        newClass = nextNewClass;
      }
    }
<<<<<<< HEAD
=======

>>>>>>> main
    ret.push(newClass, function () {
      for (var i = 0; i < initializers.length; i++) {
        initializers[i].call(newClass);
      }
    });
  }
}

function applyDecs2203(targetClass, memberDecs, classDecs) {
  var ret = [];
  applyMemberDecs(ret, targetClass, memberDecs);
  applyClassDecs(ret, targetClass, classDecs);
  return ret;
}

//# sourceMappingURL=applyDecs2203.js.map
